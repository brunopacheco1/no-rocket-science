       IDENTIFICATION DIVISION.
       PROGRAM-ID. MISSION-000.
       AUTHOR. BRUNO PACHECO.
      *******************************************
      *                MISSION-000              *
      *******************************************

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT MISSION-FILE ASSIGN 
            TO "mission-000.dat"
            ORGANIZATION IS LINE SEQUENTIAL.
       
       DATA DIVISION.
       FILE SECTION.
       FD  MISSION-FILE.
       01  FILE-DETAILS.
           88 END-OF-FILE VALUE HIGH-VALUES.
           02 CURRENT-LINE PIC X(64).

       WORKING-STORAGE SECTION.
       01  CURRENT-DATA-MESSAGE.
           05 CURRENT-PORT PIC X(16).
           05 CURRENT-SEQUENCE PIC X(32).
           05 RESERVED-BIT PIC X.
           05 CURRENT-CHAR PIC X(8).

       01  WS-WORK-AREAS.
           05 REVERSED-MESSAGE PIC X(64).
           05 PREVIOUS-MSG-TEXT PIC X(57).
           05 I USAGE BINARY-CHAR UNSIGNED.
           05 J USAGE BINARY-CHAR UNSIGNED.
           05 WRONG-BIT-POS USAGE BINARY-CHAR UNSIGNED.
           05 WRONG-BIT USAGE COMP-5 PIC 9.
           05 CONVERTION-BASE-PORT USAGE BINARY-SHORT UNSIGNED.
           05 CONVERTION-BASE-SEQUENCE USAGE BINARY-LONG UNSIGNED.
           05 CONVERTION-BASE-CHAR USAGE BINARY-CHAR UNSIGNED.

       01  WS-MESSAGES OCCURS 250 TIMES INDEXED BY MSG-INDEX.
           05 MSG-PORT USAGE BINARY-SHORT UNSIGNED.
           05 MSG-SEQUENCE USAGE BINARY-LONG UNSIGNED.
           05 MSG-CHARACTER PIC X.
           05 MSG-CHAR-ASCII USAGE BINARY-CHAR UNSIGNED 
               REDEFINES MSG-CHARACTER.
           05 MSG-TEXT PIC X(57).

       PROCEDURE DIVISION.
       
       0000-START.
           PERFORM 0001-READ-FILE.
           PERFORM 0009-DISPLAY-FLAG.
           STOP RUN.

       0001-READ-FILE.
           SET MSG-INDEX TO 1.
           OPEN INPUT MISSION-FILE.
           PERFORM 0002-READ-LINE UNTIL END-OF-FILE.
           CLOSE MISSION-FILE.

       0002-READ-LINE.
           READ MISSION-FILE
            AT END SET END-OF-FILE TO TRUE
            END-READ.
           IF NOT END-OF-FILE THEN
            PERFORM 0003-PROCESS-MESSAGE
           END-IF.

       0003-PROCESS-MESSAGE.
           MOVE FUNCTION REVERSE(CURRENT-LINE) TO REVERSED-MESSAGE.
           PERFORM 0004-FIX-ERROR.
           PERFORM 0005-READ-DATA.
           ADD 1 TO MSG-INDEX.

       0004-FIX-ERROR.
           MOVE 0 TO WRONG-BIT-POS.
           PERFORM VARYING I FROM 2 BY 1 UNTIL I IS GREATER 64
            IF REVERSED-MESSAGE(I:1) EQUAL "1" THEN
             COMPUTE WRONG-BIT-POS = WRONG-BIT-POS B-XOR (I - 1)
            END-IF
           END-PERFORM.
           ADD 1 TO WRONG-BIT-POS.
           MOVE REVERSED-MESSAGE(WRONG-BIT-POS:1) TO WRONG-BIT.
           COMPUTE WRONG-BIT = FUNCTION MOD(WRONG-BIT + 1, 2).
           MOVE WRONG-BIT TO REVERSED-MESSAGE(WRONG-BIT-POS:1).

       0005-READ-DATA.
           SET J TO 1.
           PERFORM VARYING I FROM 64 BY -1 UNTIL I IS EQUAL 0
            IF I NOT EQUAL 1 AND NOT EQUAL 2 AND NOT EQUAL 3
              AND NOT EQUAL 5 AND NOT EQUAL 9 AND NOT EQUAL 17 
              AND NOT EQUAL 33 THEN
             MOVE REVERSED-MESSAGE(I:1) TO CURRENT-DATA-MESSAGE(J:1)
             ADD 1 TO J
            END-IF
           END-PERFORM.
           MOVE CURRENT-DATA-MESSAGE TO MSG-TEXT(MSG-INDEX).
           PERFORM 0006-CONVERT-CURRENT-PORT.
           PERFORM 0007-CONVERT-CURRENT-SEQUENCE.
           PERFORM 0008-CONVERT-CURRENT-CHAR.

       0006-CONVERT-CURRENT-PORT.
           SET CONVERTION-BASE-PORT TO 1.
           SET MSG-PORT(MSG-INDEX) TO 0.
           PERFORM VARYING I FROM 16 BY -1 UNTIL I IS EQUAL 0
            IF CURRENT-PORT(I:1) EQUAL "1" THEN
             ADD CONVERTION-BASE-PORT TO MSG-PORT(MSG-INDEX)
            END-IF
            COMPUTE CONVERTION-BASE-PORT = CONVERTION-BASE-PORT * 2
           END-PERFORM.

       0007-CONVERT-CURRENT-SEQUENCE.
           SET CONVERTION-BASE-SEQUENCE TO 1.
           SET MSG-SEQUENCE(MSG-INDEX) TO 0.
           PERFORM VARYING I FROM 32 BY -1 UNTIL I IS EQUAL 0
            IF CURRENT-SEQUENCE(I:1) EQUAL "1" THEN
             ADD CONVERTION-BASE-SEQUENCE TO MSG-SEQUENCE(MSG-INDEX)
            END-IF
            COMPUTE CONVERTION-BASE-SEQUENCE = 
             CONVERTION-BASE-SEQUENCE * 2
           END-PERFORM.

       0008-CONVERT-CURRENT-CHAR.
           SET CONVERTION-BASE-CHAR TO 1.
           SET MSG-CHAR-ASCII(MSG-INDEX) TO 0.
           PERFORM VARYING I FROM 8 BY -1 UNTIL I IS EQUAL 0
            IF CURRENT-CHAR(I:1) EQUAL "1" THEN
             ADD CONVERTION-BASE-CHAR TO MSG-CHAR-ASCII(MSG-INDEX)
            END-IF
            COMPUTE CONVERTION-BASE-CHAR = CONVERTION-BASE-CHAR * 2
           END-PERFORM.

       0009-DISPLAY-FLAG.
           SORT WS-MESSAGES DESCENDING MSG-PORT ASCENDING MSG-SEQUENCE.
           PERFORM VARYING I FROM 1 BY 1 UNTIL I IS EQUAL 251
            IF MSG-PORT(I) = 61173 
             AND PREVIOUS-MSG-TEXT NOT EQUAL MSG-TEXT(I) THEN
             DISPLAY MSG-CHARACTER(I) WITH NO ADVANCING
             MOVE MSG-TEXT(I) TO PREVIOUS-MSG-TEXT
            END-IF
           END-PERFORM.
           DISPLAY SPACE.

       END PROGRAM MISSION-000.
